// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Curiosity.subsystems;

import org.opencv.core.Mat;
import org.usfirst.frc4579.Curiosity.RobotMap;
import org.usfirst.frc4579.Curiosity.commands.*;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Vision extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	final int resolution_HEIGHT = 320;
	final int resolution_WIDTH = 240;
	
	UsbCamera mainCamera = new UsbCamera("Main Camera", 0);
	UsbCamera secondCamera = new UsbCamera("Second Camera", 1);
	
	CvSink inputStream = CameraServer.getInstance().getVideo(mainCamera);
	CvSource outputStream = CameraServer.getInstance().putVideo("Camera", resolution_HEIGHT, resolution_WIDTH);
	Mat image = new Mat();
	
	short currentCamera;
	
	//Initializes the vision subsystem
	public void initVision(){
		initCameraSettings();
		cameraThread.start();
//		initCameras();
		System.out.println("Vision: ***Finished initializing Vision subsystem***");
	}
	
	//Thread that runs all the camera code
	Thread cameraThread = new Thread(() -> {
		System.out.println("Starting Camera Thread");
		
		System.out.println("Camera thread started up");
		while(!Thread.interrupted()){
			updateImage();
		}
	});
	
	//Sets the camera settings, such as resolution and FPS
	public void initCameraSettings(){
		mainCamera.setResolution(resolution_HEIGHT,resolution_WIDTH);
		mainCamera.setFPS(30);
		
		secondCamera.setResolution(resolution_HEIGHT,resolution_WIDTH);
		secondCamera.setFPS(30);
	}
	
	// Switches which camera is set as the input stream
	public void switchCamera(){
		currentCamera = (short) ((++currentCamera)%2);
		
		System.out.println("Now running camera #" + currentCamera);
		
		switch (currentCamera){
			case 0:
				inputStream.setSource(mainCamera);
				break;
			case 1:
				inputStream.setSource(secondCamera);
				break;
		}
	}

	// Pulls an image from the input stream and puts it into the output stream
	public void updateImage(){		
		// Tries to get frame from a camera
		try{
			inputStream.grabFrame(image);
			
			// Tries to put a frame onto the output stream
			outputStream.putFrame(image);
		}
		catch(Exception e){
			System.out.println("Couldn't get frame from input stream");
		}
	}
	
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

