// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Curiosity.subsystems;

import org.opencv.core.Mat;
import org.usfirst.frc4579.Curiosity.RobotMap;
import org.usfirst.frc4579.Curiosity.commands.*;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Vision extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	UsbCamera mainCamera;
	UsbCamera secondCamera;
	
	CvSink inputStream;
	CvSource outputStream;
	
	short currentCamera;
	
	public void initVision(){
		initCameras();
	}
	
	public void initCameras(){
		mainCamera = new UsbCamera("Main Camera", 0);
		mainCamera.setResolution(320,240);
		mainCamera.setFPS(20);
		
		secondCamera = new UsbCamera("Second Camera", 1);
		secondCamera.setResolution(320,240);
		secondCamera.setFPS(20);
		
		inputStream = CameraServer.getInstance().getVideo(mainCamera);
		outputStream = CameraServer.getInstance().putVideo("Camera", 320, 240);
	}
	
	public void switchCamera(){
		currentCamera = (short) ((++currentCamera)%2);
		
		System.out.println("Now running camera #" + currentCamera);
		
		switch (currentCamera){
			case 0:
				inputStream.setSource(mainCamera);
				break;
			case 1:
				inputStream.setSource(secondCamera);
				break;
		}
	}

	public void updateImage(){
		Mat image = new Mat();
		inputStream.grabFrame(image);
		outputStream.putFrame(image);
	}
	
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

